# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-23 17:28
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


def forward_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    role = apps.get_model("main", "Role")
    db_alias = schema_editor.connection.alias
    role.objects.using(db_alias).bulk_create([
        role(name="admin"),
        role(name="regular"),
    ])

    user = apps.get_model("main", "User")
    user.objects.using(db_alias).bulk_create([
        user(username="admin",
             password="pbkdf2_sha256$36000$1ZCY4yWm43RG$YqYwYgQvWu8pIm3jADmDh8XMfGbWLN2fQ65Ib0hr7RA=",
             email="bossmontaro@gmail.com",
             role_id_id=1)
    ])

    document = apps.get_model("main", "Document")
    document.objects.using(db_alias).bulk_create([
        document(title="PyDMS Welcome Message",
                 content="""<p>Hello and welcome,<br />PyDMS is an application 
                 that can help you manage documents in an organized way.<br />
                 Need to share your idea? create a public document and share 
                 the url with friends.<br />Need to preserve a precious 
                 memory? Simply create a private document.<br /><br />
                 If this is the first time running the app, please signup to 
                 get started!</p>""",
                 author_id=1)
    ])


def reverse_func(apps, schema_editor):
    # forwards_func() creates two Country instances,
    # so reverse_func() should delete them.
    role = apps.get_model("main", "Role")
    user = apps.get_model("main", "User")
    document = apps.get_model("main", "Document")
    db_alias = schema_editor.connection.alias
    role.objects.using(db_alias).filter(name="admin").delete()
    role.objects.using(db_alias).filter(name="regular").delete()
    user.objects.using(db_alias).filter(username="admin").delete()
    document.objects.using(db_alias).filter(title="Doc-Mage Welcome Message").delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('about', models.TextField(blank=True, max_length=500)),
                ('full_name', models.TextField(blank=True, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('content', models.TextField(blank=True)),
                ('access', models.CharField(default='public', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='role_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='main.Role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.RunPython(forward_func, reverse_func),
    ]
